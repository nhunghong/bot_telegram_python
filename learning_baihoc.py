from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import nest_asyncio
nest_asyncio.apply()
import os
from dotenv import load_dotenv
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

#BOT_TOKEN = "7442682123:AAEC5a-kK2dls3UKlC8Ya3ASO6b-pb820tc"

stages = {
    "gd1": "Giai ƒëo·∫°n 1: L√†m quen Python",
    "gd2": "Giai ƒëo·∫°n 2: Th·ª±c h√†nh th·ª±c t·∫ø",
    "gd3": "Giai ƒëo·∫°n 3: Automation Test",
    "gd4": "Giai ƒëo·∫°n 4: N√¢ng cao"
}

lessons = {
    # GIAI ƒêO·∫†N 1
    "g1_b1": {
        "title": "B√†i 1: Gi·ªõi thi·ªáu Python",
        "content": (
            "*üëã Python l√† g√¨?*\n\n"
            "- Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh b·∫≠c cao, c√∫ ph√°p ƒë∆°n gi·∫£n, d·ªÖ ƒë·ªçc.\n"
            "- D√πng trong nhi·ªÅu lƒ©nh v·ª±c: ki·ªÉm th·ª≠ t·ª± ƒë·ªông, ph√¢n t√≠ch d·ªØ li·ªáu, AI, web...\n"
            "- Ph√π h·ª£p c·∫£ v·ªõi ng∆∞·ªùi m·ªõi h·ªçc l·∫≠p tr√¨nh ho·∫∑c tester mu·ªën chuy·ªÉn sang automation.\n\n"
            "*ü§î T·∫°i sao ch·ªçn Python m√† kh√¥ng ph·∫£i ng√¥n ng·ªØ kh√°c?*\n"
            "- ‚úîÔ∏è C√∫ ph√°p ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu h∆°n Java, C++, C#\n"
            "- ‚úîÔ∏è C·ªông ƒë·ªìng l·ªõn, d·ªÖ t√¨m t√†i li·ªáu v√† h·ªó tr·ª£\n"
            "- ‚úîÔ∏è C√≥ nhi·ªÅu th∆∞ vi·ªán m·∫°nh: Selenium (test), Pandas (x·ª≠ l√Ω d·ªØ li·ªáu), FastAPI, v.v.\n"
            "- ‚úîÔ∏è ƒê∆∞·ª£c d√πng b·ªüi c√°c c√¥ng ty l·ªõn: Google, Facebook, Netflix, NASA...\n"
            "- ‚úîÔ∏è Kh√¥ng c·∫ßn h·ªçc c·∫•u tr√∫c ph·ª©c t·∫°p nh∆∞ class, static... t·ª´ ƒë·∫ßu\n\n"
            "*üîß Python gi√∫p g√¨ cho tester?*\n"
            "- Vi·∫øt script ki·ªÉm th·ª≠ t·ª± ƒë·ªông nhanh ch√≥ng\n"
            "- Test API d·ªÖ d√†ng v·ªõi Requests\n"
            "- T·ª± ƒë·ªông h√≥a ki·ªÉm tra Excel, email, b√°o c√°o...\n\n"
            "*üì¶ V√≠ d·ª• ƒë·∫ßu ti√™n:*\n"
            "```python\nprint(\"Hello, Python!\")\n```\n\n"
            "*üéØ Sau b√†i n√†y b·∫°n s·∫Ω:*\n"
            "- Hi·ªÉu Python d√πng ƒë·ªÉ l√†m g√¨\n"
            "- L√Ω do n√™n ch·ªçn Python cho automation\n"
            "- Chu·∫©n b·ªã c√†i ƒë·∫∑t Python ·ªü b√†i ti·∫øp theo"
        )
    },
    "g1_b2": {
        "title": "B√†i 2: C√†i ƒë·∫∑t Python & VSCode",
        "content": (
            "üß© *C√†i Python*\n"
            "1. Truy c·∫≠p: https://www.python.org/downloads/\n"
            "2. Ch·ªçn phi√™n b·∫£n ·ªïn ƒë·ªãnh m·ªõi nh·∫•t (g·ª£i √Ω: Python 3.12.x)\n"
            "3. Khi c√†i ƒë·∫∑t:\n"
            "   - ‚úÖ Tick v√†o *\"Add Python to PATH\"*\n"
            "   - ‚úÖ Ch·ªçn *\"Install Now\"*\n"
            "\n"
            "üîç Ki·ªÉm tra sau khi c√†i:\n"
            "`python --version`\n"
            "\n"
            "---\n"
            "üíª *C√†i Visual Studio Code (VSCode)*\n"
            "1. Truy c·∫≠p: https://code.visualstudio.com/\n"
            "2. Ch·ªçn b·∫£n ph√π h·ª£p h·ªá ƒëi·ªÅu h√†nh c·ªßa b·∫°n (Windows/Mac/Linux)\n"
            "3. Sau khi c√†i:\n"
            "   - M·ªü VSCode\n"
            "   - V√†o Extensions (Ctrl+Shift+X) ‚Üí C√†i *Python* (t√°c gi·∫£: Microsoft)\n"
            "\n"
            "---\n"
            "üöÄ *Ch·∫°y th·ª≠ Python ƒë·∫ßu ti√™n:*\n"
            "1. T·∫°o file `test.py`\n"
            "2. Nh·∫≠p:\n"
            "```python\nprint(\"Xin ch√†o Python!\")\n```\n"
            "3. Click chu·ªôt ph·∫£i ‚Üí *Run Python File in Terminal*\n"
            "\n"
            "‚úÖ Sau b√†i n√†y:\n"
            "- B·∫°n ƒë√£ c√†i xong Python & VSCode\n"
            "- Bi·∫øt c√°ch ch·∫°y 1 file Python ƒë∆°n gi·∫£n"
        )

    },
    "g1_b3": {
        "title": "B√†i 3: Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu",
        "content": (
            "*üì¶ Bi·∫øn l√† g√¨?*\n"
            "- Bi·∫øn l√† n∆°i l∆∞u tr·ªØ d·ªØ li·ªáu trong ch∆∞∆°ng tr√¨nh.\n"
            "- B·∫°n c√≥ th·ªÉ t∆∞·ªüng t∆∞·ª£ng n√≥ nh∆∞ h·ªôp ch·ª©a gi√° tr·ªã.\n\n"
            "*üìò C√°ch khai b√°o bi·∫øn trong Python:*\n"
            "```python\nname = 'Nhung'       # chu·ªói (string)\nage = 30             # s·ªë nguy√™n (int)\nis_tester = True     # gi√° tr·ªã ƒë√∫ng/sai (bool)\nheight = 1.62         # s·ªë th·ª±c (float)\n```\n\n"
            "*üí° M·ªôt s·ªë ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n:*\n"
            "- `str`: chu·ªói k√Ω t·ª±, v√≠ d·ª•: `'Hello'`, `'Python'`\n"
            "- `int`: s·ªë nguy√™n, v√≠ d·ª•: `1`, `10`, `-5`\n"
            "- `float`: s·ªë th·ª±c, v√≠ d·ª•: `1.5`, `3.14`\n"
            "- `bool`: gi√° tr·ªã logic, `True` ho·∫∑c `False`\n\n"
            "*üîç C√°ch ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu:*\n"
            "```python\nprint(type(name))     # <class 'str'>\nprint(type(age))      # <class 'int'>\n```\n\n"
            "*üß† Ghi nh·ªõ:*\n"
            "- Python t·ª± ƒë·ªông hi·ªÉu ki·ªÉu d·ªØ li·ªáu d·ª±a tr√™n gi√° tr·ªã b·∫°n g√°n.\n"
            "- Kh√¥ng c·∫ßn khai b√°o ki·ªÉu r√µ r√†ng nh∆∞ c√°c ng√¥n ng·ªØ kh√°c.\n"
            "- T√™n bi·∫øn n√™n vi·∫øt b·∫±ng ch·ªØ th∆∞·ªùng, c√≥ th·ªÉ d√πng d·∫•u _ (g·∫°ch d∆∞·ªõi).\n\n"
            "üéØ *Sau b√†i n√†y b·∫°n s·∫Ω:*\n"
            "- Bi·∫øt c√°ch khai b√°o bi·∫øn\n"
            "- Ph√¢n bi·ªát ƒë∆∞·ª£c c√°c ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n\n"
            "- Ki·ªÉm tra ƒë∆∞·ª£c ki·ªÉu d·ªØ li·ªáu trong Python"
        )
    },
    "g1_b4": {
        "title": "B√†i 4: To√°n t·ª≠ + logic",
        "content": (
            "*üî¢ To√°n t·ª≠ trong Python:*\n\n"
            "*1. To√°n t·ª≠ s·ªë h·ªçc:*\n"
            "- `+` c·ªông: `a + b`\n"
            "- `-` tr·ª´: `a - b`\n"
            "- `*` nh√¢n: `a * b`\n"
            "- `/` chia: `a / b`\n"
            "- `//` chia l·∫•y nguy√™n: `a // b`\n"
            "- `%` chia l·∫•y d∆∞: `a % b`\n"
            "- `**` l≈©y th·ª´a: `a ** b`\n\n"
            "```python\na = 5\nb = 2\nprint(a + b)   # 7\nprint(a % b)   # 1\n```\n\n"

            "*2. To√°n t·ª≠ so s√°nh:*\n"
            "- `==`: so s√°nh b·∫±ng\n"
            "- `!=`: kh√°c nhau\n"
            "- `>`: l·ªõn h∆°n\n"
            "- `<`: nh·ªè h∆°n\n"
            "- `>=`: l·ªõn h∆°n ho·∫∑c b·∫±ng\n"
            "- `<=`: nh·ªè h∆°n ho·∫∑c b·∫±ng\n"
            "```python\nprint(5 > 2)    # True\nprint(3 == 4)   # False\n```\n\n"

            "*3. To√°n t·ª≠ logic:*\n"
            "- `and`: ƒë√∫ng khi c·∫£ 2 ƒë·ªÅu ƒë√∫ng\n"
            "- `or`: ƒë√∫ng khi √≠t nh·∫•t 1 c√°i ƒë√∫ng\n"
            "- `not`: ph·ªß ƒë·ªãnh gi√° tr·ªã\n"
            "```python\nage = 25\nis_tester = True\nprint(age > 18 and is_tester)  # True\n```\n\n"

            "*üéØ ·ª®ng d·ª•ng logic:* V√≠ d·ª• ki·ªÉm tra ƒë·ªß ƒëi·ªÅu ki·ªán h·ªçc n√¢ng cao:\n"
            "```python\nif age > 18 and is_tester:\n    print('B·∫°n ƒë·ªß ƒëi·ªÅu ki·ªán h·ªçc n√¢ng cao')\nelse:\n    print('Ch∆∞a ƒë·ªß ƒëi·ªÅu ki·ªán')\n```\n\n"

            "üìå *Ghi nh·ªõ:*\n"
            "- D√πng to√°n t·ª≠ ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu s·ªë v√† logic.\n"
            "- C√°c ƒëi·ªÅu ki·ªán logic th∆∞·ªùng d√πng trong ki·ªÉm th·ª≠ t·ª± ƒë·ªông v√† x·ª≠ l√Ω d·ªØ li·ªáu.\n"
            "- K·∫øt h·ª£p `if`, `and`, `or`, `not` r·∫•t quan tr·ªçng khi vi·∫øt ki·ªÉm th·ª≠.\n"
        )
    },

    "g1_b5": {
        "title": "B√†i 5: C√¢u l·ªánh ƒëi·ªÅu ki·ªán",
        "content": (
            "*üìå C√¢u l·ªánh ƒëi·ªÅu ki·ªán `if - else - elif` l√† g√¨?*\n\n"
            "üëâ D√πng ƒë·ªÉ ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√∫ng hay sai v√† x·ª≠ l√Ω theo t·ª´ng tr∆∞·ªùng h·ª£p.\n\n"

            "*1. C√¢u l·ªánh `if - else`:*\n"
            "```python\nage = 16\nif age >= 18:\n    print('ƒê·ªß tu·ªïi h·ªçc n√¢ng cao')\nelse:\n    print('Ch∆∞a ƒë·ªß tu·ªïi')\n```\n"
            "‚û°Ô∏è N·∫øu ƒëi·ªÅu ki·ªán ƒë√∫ng th√¨ th·ª±c hi·ªán ph·∫ßn `if`, n·∫øu sai th√¨ th·ª±c hi·ªán ph·∫ßn `else`.\n\n"

            "*2. C√¢u l·ªánh `elif` (else if):*\n"
            "```python\nscore = 85\nif score >= 90:\n    print('Xu·∫•t s·∫Øc')\nelif score >= 70:\n    print('Kh√°')\nelse:\n    print('C·∫ßn c·ªë g·∫Øng')\n```\n"
            "‚û°Ô∏è Ki·ªÉm tra nhi·ªÅu ƒëi·ªÅu ki·ªán. ƒêi·ªÅu ki·ªán n√†o ƒë√∫ng ƒë·∫ßu ti√™n s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán.\n\n"

            "*3. So s√°nh k·∫øt h·ª£p nhi·ªÅu ƒëi·ªÅu ki·ªán:*\n"
            "```python\nage = 22\nis_tester = True\nif age >= 18 and is_tester:\n    print('H·ªçc ƒë∆∞·ª£c automation r·ªìi!')\n```\n\n"

            "*üí° Ghi nh·ªõ:*\n"
            "- `if` lu√¥n ƒë·ª©ng ƒë·∫ßu kh·ªëi ƒëi·ªÅu ki·ªán.\n"
            "- `elif` c√≥ th·ªÉ c√≥ nhi·ªÅu d√≤ng.\n"
            "- `else` ch·ªâ c√≥ 1 v√† lu√¥n n·∫±m cu·ªëi c√πng.\n\n"

            "‚úÖ ƒê√¢y l√† c·∫•u tr√∫c r·∫•t quan tr·ªçng trong ki·ªÉm th·ª≠ logic, t·ª± ƒë·ªông h√≥a v√† x·ª≠ l√Ω lu·ªìng d·ªØ li·ªáu."
        )
    },
    "g1_b6": {
        "title": "B√†i 6: V√≤ng l·∫∑p for, while",
        "content": (
            "*üîÅ V√≤ng l·∫∑p d√πng ƒë·ªÉ l√†m g√¨?*\n"
            "‚û°Ô∏è V√≤ng l·∫∑p gi√∫p l·∫∑p ƒëi l·∫∑p l·∫°i m·ªôt kh·ªëi l·ªánh nhi·ªÅu l·∫ßn thay v√¨ ph·∫£i vi·∫øt l·∫°i th·ªß c√¥ng.\n\n"

            "*1. V√≤ng l·∫∑p `for`: Duy·ªát qua danh s√°ch*\n"
            "```python\ndanh_sach = ['Python', 'Selenium', 'API']\nfor ten in danh_sach:\n    print('T√¥i ƒëang h·ªçc:', ten)\n```\n"
            "‚û°Ô∏è L·∫∑p qua t·ª´ng ph·∫ßn t·ª≠ trong danh s√°ch v√† x·ª≠ l√Ω.\n\n"

            "*2. V√≤ng l·∫∑p v·ªõi `range()` ‚Äì ƒê·∫øm s·ªë l·∫ßn*\n"
            "```python\nfor i in range(5):\n    print('L·∫ßn', i)\n```\n"
            "‚û°Ô∏è `range(5)` t·∫°o ra c√°c s·ªë t·ª´ 0 ƒë·∫øn 4 (5 s·ªë).\n\n"

            "*3. V√≤ng l·∫∑p `while`: L·∫∑p khi ƒëi·ªÅu ki·ªán c√≤n ƒë√∫ng*\n"
            "```python\nn = 1\nwhile n <= 3:\n    print('L·∫ßn l·∫∑p:', n)\n    n += 1\n```\n"
            "‚û°Ô∏è D√πng `while` khi ch∆∞a bi·∫øt r√µ s·ªë l·∫ßn l·∫∑p.\n\n"

            "*üìå Ghi nh·ªõ:*\n"
            "- `for` ph√π h·ª£p khi duy·ªát danh s√°ch ho·∫∑c s·ªë l·∫ßn c·ª• th·ªÉ.\n"
            "- `while` d√πng khi mu·ªën l·∫∑p ƒë·∫øn khi ƒëi·ªÅu ki·ªán thay ƒë·ªïi.\n"
            "- ƒê·ª´ng qu√™n `n += 1` n·∫øu kh√¥ng s·∫Ω l·∫∑p v√¥ t·∫≠n üò±\n\n"

            "üéØ *·ª®ng d·ª•ng trong th·ª±c t·∫ø:*\n"
            "- L·∫∑p qua danh s√°ch d·ªØ li·ªáu ki·ªÉm th·ª≠\n"
            "- Ch·∫°y ki·ªÉm tra nhi·ªÅu tr∆∞·ªùng h·ª£p m·ªôt c√°ch t·ª± ƒë·ªông\n"
            "- T·ª± ƒë·ªông ki·ªÉm tra t·ª´ng b∆∞·ªõc trong h·ªá th·ªëng"
        )
    },

    "g1_b7": {
        "title": "B√†i 7: H√†m & g·ªçi l·∫°i h√†m",
        "content": (
            "*üì£ H√†m l√† g√¨?*\n"
            "‚û°Ô∏è H√†m l√† t·∫≠p h·ª£p c√°c l·ªánh ƒë∆∞·ª£c ƒë·∫∑t t√™n, d√πng ƒë·ªÉ th·ª±c hi·ªán m·ªôt nhi·ªám v·ª• c·ª• th·ªÉ.\n"
            "‚û°Ô∏è Gi√∫p chia nh·ªè ch∆∞∆°ng tr√¨nh, t√°i s·ª≠ d·ª•ng v√† d·ªÖ qu·∫£n l√Ω h∆°n.\n\n"

            "*üìå C√°ch ƒë·ªãnh nghƒ©a h√†m:*\n"
            "```python\ndef chao(name):\n    print(f'Ch√†o {name}, ch√∫c b·∫°n h·ªçc t·ªët!')\n```\n"
            "üëâ `def` l√† t·ª´ kh√≥a ƒë·ªÉ ƒë·ªãnh nghƒ©a h√†m.\n"
            "üëâ `chao` l√† t√™n h√†m, `name` l√† tham s·ªë truy·ªÅn v√†o.\n\n"

            "*‚ñ∂Ô∏è G·ªçi l·∫°i h√†m:*\n"
            "```python\nchao('Nhung')\n```\n"
            "‚û°Ô∏è K·∫øt qu·∫£: `Ch√†o Nhung, ch√∫c b·∫°n h·ªçc t·ªët!`\n\n"

            "*üéØ L·ª£i √≠ch khi d√πng h√†m:*\n"
            "- Gi√∫p code ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc.\n"
            "- C√≥ th·ªÉ g·ªçi l·∫°i nhi·ªÅu l·∫ßn thay v√¨ l·∫∑p code.\n"
            "- D·ªÖ s·ª≠a l·ªói ho·∫∑c m·ªü r·ªông logic ki·ªÉm th·ª≠.\n\n"

            "*üöÄ ·ª®ng d·ª•ng th·ª±c t·∫ø:*\n"
            "- Vi·∫øt c√°c b∆∞·ªõc ki·ªÉm th·ª≠ nh∆∞: `login()`, `logout()`\n"
            "- T√°i s·ª≠ d·ª•ng ki·ªÉm th·ª≠ nhi·ªÅu trang kh√°c nhau\n"
            "- T·ªï ch·ª©c code r√µ r√†ng theo ch·ª©c nƒÉng\n\n"

            "*‚úÖ Ghi nh·ªõ:*\n"
            "- H√†m ph·∫£i ƒë·ªãnh nghƒ©a tr∆∞·ªõc khi g·ªçi.\n"
            "- C√≥ th·ªÉ c√≥ ho·∫∑c kh√¥ng c√≥ tham s·ªë.\n"
            "- C√≥ th·ªÉ tr·∫£ k·∫øt qu·∫£ v·ªÅ b·∫±ng `return`."
        )
    },

    # GIAI ƒêO·∫†N 2: TH·ª∞C H√ÄNH
    "g2_b2": {
        "title": "B√†i 2: Dictionary - T·ª´ ƒëi·ªÉn trong Python",
        "content": (
            "*üìò Dictionary l√† g√¨?*\n"
            "‚û°Ô∏è L√† ki·ªÉu d·ªØ li·ªáu l∆∞u tr·ªØ theo c·∫∑p `key: value`, gi·ªëng nh∆∞ m·ªôt cu·ªën t·ª´ ƒëi·ªÉn.\n\n"
            "*üìå V√≠ d·ª• t·∫°o dictionary:*\n"
            "```python\nthong_tin = {'ten': 'Nhung', 'tuoi': 30}\n```\n"
            "- `'ten'` v√† `'tuoi'` l√† key.\n"
            "- `'Nhung'` v√† `30` l√† value.\n\n"
            "*üìå Truy c·∫≠p d·ªØ li·ªáu theo key:*\n"
            "```python\nprint(thong_tin['ten'])  # K·∫øt qu·∫£: Nhung\n```\n\n"
            "*üéØ ·ª®ng d·ª•ng:*\n"
            "- L∆∞u tr·ªØ th√¥ng tin ng∆∞·ªùi d√πng, c·∫•u h√¨nh h·ªá th·ªëng, d·ªØ li·ªáu JSON...\n"
            "- Truy xu·∫•t nhanh gi√° tr·ªã theo t√™n r√µ r√†ng."
        )
    },

    "g2_b3": {
        "title": "B√†i 3: X·ª≠ l√Ω chu·ªói v√† input",
        "content": (
            "*‚úçÔ∏è Nh·∫≠n d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng v·ªõi `input()`*\n"
            "```python\nten = input('Nh·∫≠p t√™n: ')\nprint(f'Xin ch√†o {ten}')\n```\n"
            "- `input()` lu√¥n tr·∫£ v·ªÅ chu·ªói.\n"
            "- C√≥ th·ªÉ d√πng `int()`, `float()` ƒë·ªÉ √©p ki·ªÉu n·∫øu c·∫ßn.\n\n"
            "*üßµ M·ªôt s·ªë thao t√°c chu·ªói c∆° b·∫£n:*\n"
            "```python\ns = 'python'\nprint(s.upper())    # In hoa\nprint(s.capitalize())  # Vi·∫øt hoa ch·ªØ ƒë·∫ßu\nprint(s.replace('p', 'P'))\n```\n\n"
            "*üéØ ·ª®ng d·ª•ng:*\n"
            "- X·ª≠ l√Ω d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p v√†o (email, t√™n...)\n"
            "- L√†m s·∫°ch, chu·∫©n h√≥a th√¥ng tin tr∆∞·ªõc khi l∆∞u ho·∫∑c ki·ªÉm th·ª≠."
        )
    },

    "g2_b4": {
        "title": "B√†i 4: ƒê·ªçc ghi file .txt",
        "content": (
            "*üìÑ ƒê·ªçc/Ghi file vƒÉn b·∫£n b·∫±ng Python*\n\n"
            "*üìå Ghi d·ªØ li·ªáu v√†o file:*\n"
            "```python\nwith open('data.txt', 'w') as f:\n    f.write('Hello file')\n```\n"
            "- `'w'`: ch·∫ø ƒë·ªô ghi (overwrite).\n"
            "- `with`: t·ª± ƒë√≥ng file sau khi ghi.\n\n"
            "*üìå ƒê·ªçc d·ªØ li·ªáu t·ª´ file:*\n"
            "```python\nwith open('data.txt', 'r') as f:\n    noi_dung = f.read()\n    print(noi_dung)\n```\n\n"
            "*üéØ ·ª®ng d·ª•ng:*\n"
            "- L∆∞u log ki·ªÉm th·ª≠.\n"
            "- ƒê·ªçc d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ file c·∫•u h√¨nh/testdata."
        )
    },

    "g2_b5": {
        "title": "B√†i 5: L√†m vi·ªác v·ªõi Excel (openpyxl/pandas)",
        "content": (
            "*üìä ƒê·ªçc file Excel v·ªõi th∆∞ vi·ªán `pandas`*\n\n"
            "*üìå V√≠ d·ª• ƒë∆°n gi·∫£n:*\n"
            "```python\nimport pandas as pd\n\ndf = pd.read_excel('du_lieu.xlsx')\nprint(df.head())\n```\n"
            "- `pd.read_excel()`: ƒë·ªçc file .xlsx.\n"
            "- `df.head()`: in 5 d√≤ng ƒë·∫ßu ti√™n.\n\n"
            "*üìå Ghi d·ªØ li·ªáu ra file Excel:*\n"
            "```python\ndf.to_excel('ket_qua.xlsx', index=False)\n```\n\n"
            "*üéØ ·ª®ng d·ª•ng:*\n"
            "- T·ª± ƒë·ªông ƒë·ªçc d·ªØ li·ªáu test t·ª´ file.\n"
            "- Xu·∫•t b√°o c√°o k·∫øt qu·∫£ test, log x·ª≠ l√Ω.\n"
            "- X·ª≠ l√Ω d·ªØ li·ªáu s·∫£n ph·∫©m, th√¥ng tin ƒë∆°n h√†ng t·ª± ƒë·ªông."
        )
    },

    # GIAI ƒêO·∫†N 3: AUTOMATION
    "g3_b1": {
        "title": "B√†i 1: C√†i Selenium v√† m·ªü tr√¨nh duy·ªát Chrome",
        "content": (
            "*üì¶ C√†i ƒë·∫∑t th∆∞ vi·ªán Selenium:*\n"
            "- M·ªü terminal v√† ch·∫°y l·ªánh: `pip install selenium`\n\n"
            "*üåê T·∫£i ChromeDriver:*\n"
            "- V√†o trang: https://sites.google.com/chromium.org/driver/\n"
            "- T·∫£i ƒë√∫ng phi√™n b·∫£n t∆∞∆°ng ·ª©ng v·ªõi tr√¨nh duy·ªát Chrome ƒëang d√πng.\n"
            "- Gi·∫£i n√©n v√† ƒë·∫∑t v√†o c√πng th∆∞ m·ª•c v·ªõi file Python ho·∫∑c th√™m v√†o PATH.\n\n"
            "*üíª M·ªü tr√¨nh duy·ªát t·ª± ƒë·ªông b·∫±ng Python:*\n"
            "```python\nfrom selenium import webdriver\n\n"
            "driver = webdriver.Chrome()\ndriver.get('https://google.com')\n```"
        )
    },

    "g3_b2": {
        "title": "B√†i 2: T√¨m v√† nh·∫≠p d·ªØ li·ªáu v√†o √¥ t√¨m ki·∫øm",
        "content": (
            "*üîç T√¨m ph·∫ßn t·ª≠ theo name/class/id...*\n"
            "- C√°ch t√¨m √¥ t√¨m ki·∫øm tr√™n Google l√† theo `name='q'`\n\n"
            "*üì• Nh·∫≠p li·ªáu t·ª± ƒë·ªông:*\n"
            "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\n\n"
            "driver = webdriver.Chrome()\ndriver.get('https://google.com')\n\n"
            "search_box = driver.find_element(By.NAME, 'q')\n"
            "search_box.send_keys('Python h·ªçc automation')\n```"
        )
    },

    "g3_b3": {
        "title": "B√†i 3: Ki·ªÉm tra ti√™u ƒë·ªÅ trang v√† ƒë√≥ng tr√¨nh duy·ªát",
        "content": (
            "*‚úÖ Ki·ªÉm tra ti√™u ƒë·ªÅ trang web:* \n"
            "```python\nassert 'Google' in driver.title\n```\n\n"
            "*‚ùå ƒê√≥ng tr√¨nh duy·ªát sau khi ki·ªÉm tra xong:* \n"
            "```python\ndriver.quit()\n```"
        )
    },


    # GIAI ƒêO·∫†N 4: N√ÇNG CAO
    "g4_b1": {
        "title": "B√†i 1: Vi·∫øt h√†m ki·ªÉm th·ª≠ t·ª± ƒë·ªông",
        "content": (
            "üìå *Vi·∫øt h√†m ki·ªÉm th·ª≠ t·ª± ƒë·ªông l√† g√¨?*\n\n"
            "- L√† c√°ch b·∫°n ki·ªÉm tra 1 ch·ª©c nƒÉng trong h·ªá th·ªëng b·∫±ng ƒëo·∫°n m√£ t·ª± ƒë·ªông.\n"
            "- M·ªói h√†m ki·ªÉm th·ª≠ n√™n ch·ªâ ki·ªÉm 1 h√†nh vi c·ª• th·ªÉ.\n\n"
            "üß™ *V√≠ d·ª• ki·ªÉm tra ti√™u ƒë·ªÅ trang:*\n"
            "```python\ndef test_title():\n    assert 'Google' in driver.title\n```\n\n"
            "üëâ D√≤ng `assert` s·∫Ω ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë√∫ng/sai.\n"
            "- N·∫øu ƒë√∫ng ‚Üí ti·∫øp t·ª•c ch·∫°y.\n"
            "- N·∫øu sai ‚Üí b√°o l·ªói ngay l·∫≠p t·ª©c.\n\n"
            "üéØ *Khi n√†o d√πng?*\n"
            "- Ki·ªÉm tra trang web c√≥ t·∫£i ƒë√∫ng kh√¥ng.\n"
            "- Ki·ªÉm tra c√≥ hi·ªán ƒë√∫ng d·ªØ li·ªáu kh√¥ng."
        )
    },
    "g4_b2": {
        "title": "B√†i 2: T·∫°o class qu·∫£n l√Ω testcase",
        "content": (
            "üìå *V√¨ sao d√πng class ƒë·ªÉ t·ªï ch·ª©c test?*\n\n"
            "- Nh√≥m c√°c h√†m ki·ªÉm th·ª≠ l·∫°i theo module/ch·ª©c nƒÉng.\n"
            "- D·ªÖ m·ªü r·ªông, qu·∫£n l√Ω logic test theo t·ª´ng ph·∫ßn.\n\n"
            "üë©‚Äçüíª *V√≠ d·ª• class ki·ªÉm th·ª≠ ƒëƒÉng nh·∫≠p:*\n"
            "```python\nclass TestLogin:\n    def test_login_thanh_cong(self):\n        assert True\n\n"
            "    def test_login_that_bai(self):\n        assert False\n```\n\n"
            "üëâ Trong th·ª±c t·∫ø, c√°c h√†m test s·∫Ω thao t√°c tr√¨nh duy·ªát, nh·∫≠p d·ªØ li·ªáu, b·∫•m n√∫t...\n\n"
            "üéØ *L∆∞u √Ω:*\n"
            "- T√™n h√†m n√™n b·∫Øt ƒë·∫ßu b·∫±ng `test_`\n"
            "- C√≥ th·ªÉ d√πng framework nh∆∞ `unittest`, `pytest` ƒë·ªÉ ch·∫°y to√†n b·ªô class test."
        )
    },
    "g4_b3": {
        "title": "B√†i 3: Ghi log v√† x·ª≠ l√Ω l·ªói",
        "content": (
            "üìå *L·ªói l√† ƒëi·ªÅu kh√¥ng tr√°nh kh·ªèi trong test t·ª± ƒë·ªông.*\n\n"
            "üéØ *M·ª•c ti√™u:*\n"
            "- N·∫øu l·ªói ‚Üí log ra th√¥ng tin r√µ r√†ng.\n"
            "- Gi√∫p b·∫°n d·ªÖ debug, kh√¥ng b·ªã 'ƒë∆°' khi g·∫∑p l·ªói.\n\n"
            "üõ†Ô∏è *V√≠ d·ª• x·ª≠ l√Ω l·ªói v·ªõi try/except:*\n"
            "```python\ntry:\n    driver.find_element(\"id\", \"submit\").click()\n"
            "except Exception as e:\n    print(\"‚ùå C√≥ l·ªói x·∫£y ra:\", e)\n```\n\n"
            "üîç *Tips:*\n"
            "- Ghi log ra file ƒë·ªÉ d·ªÖ tra c·ª©u sau.\n"
            "- C√≥ th·ªÉ d√πng th∆∞ vi·ªán `logging` ƒë·ªÉ qu·∫£n l√Ω log chuy√™n nghi·ªáp h∆°n."
        )
    }

}

async def hoc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üêç Giai ƒëo·∫°n 1: L√†m quen Python", callback_data="gd1")],
        [InlineKeyboardButton("‚öôÔ∏è Giai ƒëo·∫°n 2: Th·ª±c h√†nh th·ª±c t·∫ø", callback_data="gd2")],
        [InlineKeyboardButton("ü§ñ Giai ƒëo·∫°n 3: Automation Test", callback_data="gd3")],
        [InlineKeyboardButton("üöÄ Giai ƒëo·∫°n 4: N√¢ng cao", callback_data="gd4")],
    ]
    
    text = "*Ch·ªçn giai ƒëo·∫°n h·ªçc:*"
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")


async def show_stage_lessons(query, stage):
    lessons_keyboard = []
    stage_key = f"g{stage[2]}"  # gd1 -> g1, gd2 -> g2 ...
    for i in range(1, 10):
        code = f"{stage_key}_b{i}"
        if code in lessons:
            title = lessons[code]["title"]
            btn = InlineKeyboardButton(title, callback_data=code)
            if len(lessons_keyboard) == 0 or len(lessons_keyboard[-1]) == 2:
                lessons_keyboard.append([btn])
            else:
                lessons_keyboard[-1].append(btn)
    lessons_keyboard.append([InlineKeyboardButton("üíñ Quay l·∫°i menu giai ƒëo·∫°n", callback_data="menu")])
    await query.edit_message_text(
        f"*{stages[stage]}*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(lessons_keyboard)
    )


async def show_lesson_detail(query, code):
    lesson = lessons.get(code)
    if not lesson:
        return
    stage_number = code.split("_")[0][1]  # "g1" -> "1"
    stage = f"gd{stage_number}"           # "gd1"

    current_number = int(code.split("_b")[1])
    prev_code = f"g{stage_number}_b{current_number - 1}" if f"g{stage_number}_b{current_number - 1}" in lessons else None
    next_code = f"g{stage_number}_b{current_number + 1}" if f"g{stage_number}_b{current_number + 1}" in lessons else None

    buttons = []
    if prev_code:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è B√†i tr∆∞·ªõc", callback_data=prev_code))
    if next_code:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è B√†i ti·∫øp", callback_data=next_code))
    buttons.append(InlineKeyboardButton("üîô Quay l·∫°i", callback_data=stage))

    await query.edit_message_text(
        f"*{lesson['title']}*\n\n{lesson['content']}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([buttons])
    )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "menu":
        # G·ªçi l·∫°i menu nh∆∞ng d√πng edit_message_text v√¨ ƒëang ·ªü callback
        await hoc_callback(query)
    elif data in stages:
        return await show_stage_lessons(query, data)
    elif data in lessons:
        return await show_lesson_detail(query, data)

async def hoc_callback(query):
    keyboard = [
        [InlineKeyboardButton("üêç Giai ƒëo·∫°n 1: L√†m quen Python", callback_data="gd1")],
        [InlineKeyboardButton("‚öôÔ∏è Giai ƒëo·∫°n 2: Th·ª±c h√†nh th·ª±c t·∫ø", callback_data="gd2")],
        [InlineKeyboardButton("ü§ñ Giai ƒëo·∫°n 3: Automation Test", callback_data="gd3")],
        [InlineKeyboardButton("üöÄ Giai ƒëo·∫°n 4: N√¢ng cao", callback_data="gd4")],
    ]
    await query.edit_message_text(
        "*Ch·ªçn giai ƒëo·∫°n h·ªçc:*",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    await app.bot.set_my_commands([BotCommand("hoc", "Xem danh s√°ch b√†i h·ªçc")])
    app.add_handler(CommandHandler("hoc", hoc))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("‚úÖ Bot b√†i h·ªçc Python ƒë√£ kh·ªüi ƒë·ªông.")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
