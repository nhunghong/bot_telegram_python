from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import nest_asyncio
nest_asyncio.apply()

BOT_TOKEN = "7442682123:AAEC5a-kK2dls3UKlC8Ya3ASO6b-pb820tc"

stages = {
    "gd1": "Giai ƒëo·∫°n 1: L√†m quen Python",
    "gd2": "Giai ƒëo·∫°n 2: Th·ª±c h√†nh th·ª±c t·∫ø",
    "gd3": "Giai ƒëo·∫°n 3: Automation Test",
    "gd4": "Giai ƒëo·∫°n 4: N√¢ng cao"
}

lessons = {
    # GIAI ƒêO·∫†N 1
    "g1_b1": {
        "title": "B√†i 1: Gi·ªõi thi·ªáu Python",
        "content": (
            "*Python l√† g√¨?*\n\n"
            "- Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn, c√∫ ph√°p ƒë∆°n gi·∫£n, d·ªÖ ƒë·ªçc.\n"
            "- ƒê∆∞·ª£c d√πng trong: ki·ªÉm th·ª≠ t·ª± ƒë·ªông, ph√¢n t√≠ch d·ªØ li·ªáu, AI, web...\n"
            "- D·ªÖ h·ªçc, ph√π h·ª£p c·∫£ v·ªõi tester chuy·ªÉn sang automation.\n\n"
            "*V√¨ sao tester n√™n h·ªçc Python?*\n"
            "- Vi·∫øt script ki·ªÉm th·ª≠ nhanh ch√≥ng\n"
            "- C√≥ th∆∞ vi·ªán m·∫°nh nh∆∞ Selenium, Pandas, Requests...\n"
            "- H·ªó tr·ª£ automation test, ki·ªÉm API, x·ª≠ l√Ω file\n\n"
            "*V√≠ d·ª• ƒë·∫ßu ti√™n:*\n"
            "```python\nprint(\"Hello, Python!\")\n```\n\n"
            "*Sau b√†i n√†y b·∫°n s·∫Ω:*\n"
            "- Bi·∫øt Python d√πng ƒë·ªÉ l√†m g√¨\n"
            "- Hi·ªÉu l·ª£i √≠ch v·ªõi tester\n"
            "- C√†i ƒë∆∞·ª£c Python ·ªü b√†i sau"
        )
    },
    "g1_b2": {
        "title": "B√†i 2: C√†i ƒë·∫∑t Python & VSCode",
        "content": (
            "- T·∫£i Python t·ª´ https://python.org\n"
            "- T·∫£i VSCode t·ª´ https://code.visualstudio.com\n"
            "- M·ªü terminal ch·∫°y: `python --version`\n"
            "- T·∫°o file .py v√† ch·∫°y l·ªánh `print('Hello')`"
        )
    },
    "g1_b3": {
        "title": "B√†i 3: Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu",
        "content": "```python\nname = 'Nhung'\nage = 30\nis_tester = True\nheight = 1.62\n```\nKi·ªÉu: `str`, `int`, `float`, `bool`"
    },
    "g1_b4": {
        "title": "B√†i 4: To√°n t·ª≠ + logic",
        "content": "```python\nif age > 18 and is_tester:\n    print('B·∫°n ƒë·ªß ƒëi·ªÅu ki·ªán h·ªçc n√¢ng cao')\n```"
    },
    "g1_b5": {
        "title": "B√†i 5: C√¢u l·ªánh ƒëi·ªÅu ki·ªán",
        "content": "```python\nage = 16\nif age >= 18:\n    print('ƒêƒÉng k√Ω h·ªçc')\nelse:\n    print('Ch∆∞a ƒë·ªß tu·ªïi')\n```"
    },
    "g1_b6": {
        "title": "B√†i 6: V√≤ng l·∫∑p for, while",
        "content": "```python\nfor i in range(5):\n    print(i)\n```\nD√πng for ƒë·ªÉ l·∫∑p qua danh s√°ch, while cho ƒëi·ªÅu ki·ªán linh ho·∫°t h∆°n."
    },
    "g1_b7": {
        "title": "B√†i 7: H√†m & g·ªçi l·∫°i h√†m",
        "content": "```python\ndef chao(name):\n    print(f'Ch√†o {name}')\n\nchao('tester')\n```"
    },

    # GIAI ƒêO·∫†N 2: TH·ª∞C H√ÄNH
    "g2_b1": {
        "title": "B√†i 1: Danh s√°ch (list) v√† v√≤ng l·∫∑p",
        "content": "```python\ndanh_sach = ['A', 'B', 'C']\nfor ten in danh_sach:\n    print(ten)\n```"
    },
    "g2_b2": {
        "title": "B√†i 2: Dictionary - T·ª´ ƒëi·ªÉn trong Python",
        "content": "```python\nthong_tin = {'ten': 'Nhung', 'tuoi': 30}\nprint(thong_tin['ten'])\n```"
    },
    "g2_b3": {
        "title": "B√†i 3: X·ª≠ l√Ω chu·ªói v√† input",
        "content": "```python\nten = input('Nh·∫≠p t√™n: ')\nprint(f'Xin ch√†o {ten}')\n```"
    },
    "g2_b4": {
        "title": "B√†i 4: ƒê·ªçc ghi file .txt",
        "content": "```python\nwith open('data.txt', 'w') as f:\n    f.write('Hello file')\n```"
    },
    "g2_b5": {
        "title": "B√†i 5: L√†m vi·ªác v·ªõi Excel (openpyxl/pandas)",
        "content": "```python\nimport pandas as pd\ndf = pd.read_excel('du_lieu.xlsx')\nprint(df.head())\n```"
    },

    # GIAI ƒêO·∫†N 3: AUTOMATION
    "g3_b1": {
        "title": "B√†i 1: C√†i Selenium v√† m·ªü Chrome",
        "content": "```python\nfrom selenium import webdriver\ndriver = webdriver.Chrome()\ndriver.get('https://google.com')\n```"
    },
    "g3_b2": {
        "title": "B√†i 2: T√¨m v√† nh·∫≠p li·ªáu trong √¥ textbox",
        "content": "```python\ndriver.find_element('name', 'q').send_keys('python')\n```"
    },
    "g3_b3": {
        "title": "B√†i 3: Ki·ªÉm tra ti√™u ƒë·ªÅ trang",
        "content": "```python\nassert 'Google' in driver.title\n```"
    },

    # GIAI ƒêO·∫†N 4: N√ÇNG CAO
    "g4_b1": {
        "title": "B√†i 1: Vi·∫øt h√†m ki·ªÉm th·ª≠ t·ª± ƒë·ªông",
        "content": "```python\ndef test_title():\n    assert 'Google' in driver.title\n```"
    },
    "g4_b2": {
        "title": "B√†i 2: T·∫°o class qu·∫£n l√Ω testcase",
        "content": "```python\nclass TestLogin:\n    def test_login(self):\n        pass\n```"
    },
    "g4_b3": {
        "title": "B√†i 3: Ghi log v√† x·ª≠ l√Ω l·ªói",
        "content": "```python\ntry:\n    # ch·∫°y test\nexcept Exception as e:\n    print('L·ªói:', e)\n```"
    }
}

async def hoc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üêç " + stages["gd1"], callback_data="gd1")],
        [InlineKeyboardButton("‚öôÔ∏è " + stages["gd2"], callback_data="gd2")],
        [InlineKeyboardButton("ü§ñ " + stages["gd3"], callback_data="gd3")],
        [InlineKeyboardButton("üöÄ " + stages["gd4"], callback_data="gd4")],
    ]
    await update.message.reply_text("*Ch·ªçn giai ƒëo·∫°n h·ªçc:*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

async def show_stage_lessons(query, stage):
    lessons_keyboard = []
    stage_key = f"g{stage[2]}"  # gd1 -> g1, gd2 -> g2 ...
    for i in range(1, 10):
        code = f"{stage_key}_b{i}"
        if code in lessons:
            title = lessons[code]["title"]
            btn = InlineKeyboardButton(title, callback_data=code)
            if len(lessons_keyboard) == 0 or len(lessons_keyboard[-1]) == 2:
                lessons_keyboard.append([btn])
            else:
                lessons_keyboard[-1].append(btn)
    lessons_keyboard.append([InlineKeyboardButton("üíñ Quay l·∫°i menu giai ƒëo·∫°n", callback_data="menu")])
    await query.edit_message_text(
        f"*{stages[stage]}*",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(lessons_keyboard)
    )


async def show_lesson_detail(query, code):
    lesson = lessons.get(code)
    if not lesson:
        return
    stage_number = code.split("_")[0][1]  # "g1" -> "1"
    stage = f"gd{stage_number}"           # "gd1"

    current_number = int(code.split("_b")[1])
    prev_code = f"g{stage_number}_b{current_number - 1}" if f"g{stage_number}_b{current_number - 1}" in lessons else None
    next_code = f"g{stage_number}_b{current_number + 1}" if f"g{stage_number}_b{current_number + 1}" in lessons else None

    buttons = []
    if prev_code:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è B√†i tr∆∞·ªõc", callback_data=prev_code))
    if next_code:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è B√†i ti·∫øp", callback_data=next_code))
    buttons.append(InlineKeyboardButton("üîô Quay l·∫°i", callback_data=stage))

    await query.edit_message_text(
        f"*{lesson['title']}*\n\n{lesson['content']}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([buttons])
    )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "menu":
        return await hoc(query, context)
    elif data in stages:
        return await show_stage_lessons(query, data)
    elif data in lessons:
        return await show_lesson_detail(query, data)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    await app.bot.set_my_commands([BotCommand("hoc", "Xem danh s√°ch b√†i h·ªçc")])
    app.add_handler(CommandHandler("hoc", hoc))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("‚úÖ Bot b√†i h·ªçc Python ƒë√£ kh·ªüi ƒë·ªông.")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
